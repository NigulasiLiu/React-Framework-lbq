import React from 'react';
import { Row, Col, Card, Modal, Button, message, Statistic, Input, Table, Tooltip } from 'antd';
import { Link } from 'react-router-dom';
import VulnerabilityScanSidebar from '../SideBar/ScanProcessSidebar';
import VulnerabilityDetailsSidebar from '../SideBar/VulnerabilityDetailsSidebar';
import CustomPieChart from '../CustomAntd/CustomPieChart';
import { StatusItem, vulColumnsType } from '../Columns';
import '../CustomAntd/SidebarStyle.css';
import '../CustomAntd/IgnoreRow.css';

import { DataContext, DataContextType } from '../ContextAPI/DataManager';
import { LoadingOutlined, SearchOutlined } from '@ant-design/icons';
import DataDisplayTable from '../OWLTable/DataDisplayTable';
import moment from 'moment';
import { Vul_Data_API } from '../../service/config';
import { blueButton, cancelButton } from '../../style/config';

type RangeValue<T> = [T | null, T | null] | null;

interface vulnerablityProps {
};

interface vulnerablityState {
    ignoredBugExps_array: { [uuid: string]: string[] }; // 修改为键值对形式存储
    ignoredBugExps: any[], // 添加被忽略的 bug_exp 数组
    ignoredBugExpsData: { uuid: string; bugExps: string }[]; // 新增
    showIgnoredModal: boolean; // 新增

    currentRecord: any, // 当前选中的记录
    selectedVulnUuid: string;


    vulncolumns: any[];
    doneVulnerabilitiesCount: number;
    // ...其他状态字段
    showModal: boolean, // 控制模态框显示
    currentTime: string;

    // count: number;
    deleteIndex: number | null;
    selectedRowKeys: React.Key[];
    selectedDateRange: [string | null, string | null];
    activeIndex: any;
    areRowsSelected: boolean;
    isSidebarOpen: boolean;
    isScanSidebarOpen: boolean;
    riskItemCount: number;

};

interface StatusPanelProps {
    scanPanelData: StatusItem[];
    orientation: 'vertical' | 'horizontal'; // 添加方向属性
}

const StatusPanel: React.FC<StatusPanelProps> = ({ scanPanelData, orientation }) => {
    const containerStyle: React.CSSProperties = {
        //border:'5px solid black',
        display: 'flex',
        flexDirection: orientation === 'vertical' ? 'column' : 'row',
        alignItems: 'flex-start',
        gap: orientation === 'horizontal' ? '7px' : '0', // 设置水平方向的间隔
    };

    const itemStyle: React.CSSProperties = {
        display: 'flex',
        justifyContent: orientation === 'vertical' ? 'space-between' : 'flex-start',
        alignItems: 'center',
        width: orientation === 'vertical' ? '100%' : undefined,
    };

    const valueStyle: React.CSSProperties = {
        marginLeft: orientation === 'vertical' ? '40px' : '0', // 设置垂直方向的间隔
    };

    return (
        <div style={containerStyle}>
            {scanPanelData.map((status, index) => (
                <div key={index} style={itemStyle}>
          <span style={{
              height: '10px',
              width: '10px',
              backgroundColor: status.color,
              borderRadius: '50%',
              display: 'inline-block',
              marginRight: '8px',
          }}></span>
                    <span style={{ flexGrow: 1 }}>{status.label}</span>
                    {orientation === 'vertical' && (
                        <span style={valueStyle}>{status.value}</span>
                    )}
                </div>
            ))}
        </div>
    );
};


export interface vulDetectColumnsType {
    key: React.Key;
    ip: string;
    uuid: string;
    port: string;
    scanTime: string;
    scanType: string;       // 指令
    status: string;
}

class VulnerabilityList extends React.Component<vulnerablityProps, vulnerablityState> {
    private expColumns: ({ dataIndex: string; title: string; key: string } | {
        dataIndex: string;
        title: string;
        render: (text: string) => string;
        key: string
    } | { dataIndex: string; title: string; render: (text: string, record: any) => JSX.Element })[];
    private fingerColumns: ({ dataIndex: string; title: string; key: string } | {
        dataIndex: string;
        title: string;
        key: string
    } | { dataIndex: string; title: string; render: (text: string) => string; key: string })[];
    private pocColumns: ({ dataIndex: string; title: string; key: string } | {
        dataIndex: string;
        title: string;
        key: string
    } | { dataIndex: string; title: string; render: (text: string) => string; key: string })[];

    constructor(props: any) {
        super(props);
        const ignoredBugExps_array = JSON.parse(localStorage.getItem('ignoredBugExps_array') || '{}');
        this.state = {
            ignoredBugExps_array,
            ignoredBugExps: [], // 添加被忽略的 bug_exp 数组
            showIgnoredModal: false, // 新增
            ignoredBugExpsData: this.getIgnoredBugExpsData(ignoredBugExps_array),


            // ...其他状态字段
            showModal: false, // 控制模态框显示
            currentRecord: null, // 当前选中的记录
            selectedVulnUuid: '', // 添加状态来存储当前选中的漏洞 id
            doneVulnerabilitiesCount: 0, // 初始化为0或从其他数据源加载的初始值
            isSidebarOpen: false,
            isScanSidebarOpen: false,
            currentTime: new Date().toLocaleString(), // 添加用于存储当前时间的状态变量

            // count: 2,
            deleteIndex: -1,
            activeIndex: [-1, -1, -1, -1],
            selectedRowKeys: [], // 这里用来存储勾选的行的 key 值
            areRowsSelected: false,
            selectedDateRange: [null, null],
            riskItemCount: 5, // 初始化风险项的数量
            vulncolumns: [
                {
                    title: 'ID',
                    dataIndex: 'id',
                    key: 'id',
                },
                {
                    title: '主机名称',
                    dataIndex: 'uuid',
                    key: 'uuid',
                    filterIcon: (filtered: boolean) => <SearchOutlined
                        style={{ color: filtered ? '#1890ff' : undefined }} />,
                    render: (text: string, record: vulDetectColumnsType) => (
                        <div>
                            <div>
                                <Link to={`/app/detailspage?uuid=${encodeURIComponent(record.uuid)}`} target="_blank">
                                    <Button style={{
                                        fontWeight: 'bold',
                                        border: 'transparent',
                                        backgroundColor: 'transparent',
                                        color: '#4086FF',
                                        padding: '0 0',
                                    }}>
                                        <Tooltip title={record.uuid}>
                                            <div style={{
                                                whiteSpace: 'nowrap',
                                                overflow: 'hidden',
                                                textOverflow: 'ellipsis',
                                                maxWidth: '80px',
                                            }}>
                                                {record.uuid || '-'}
                                            </div>
                                        </Tooltip>
                                    </Button>
                                </Link>
                            </div>
                            <div style={{
                                fontSize: 'small', // 字体更小
                                background: '#f0f0f0', // 灰色背景
                                padding: '2px 4px', // 轻微内边距
                                borderRadius: '2px', // 圆角边框
                                display: 'inline-block', // 使得背景色仅围绕文本
                                marginTop: '4px', // 上边距
                            }}>
                                <span style={{ fontWeight: 'bold' }}>内网IP:</span> {record.ip}
                            </div>
                        </div>
                    ),
                },
                {
                    title: '端口',
                    dataIndex: 'port',
                },
                {
                    title: '扫描时刻', dataIndex: 'scanTime',
                    render: (text: string) => moment.unix(parseInt(text)).format('YYYY-MM-DD HH:mm:ss'),
                    sorter: (a: any, b: any) => parseFloat(a.scanTime) - parseFloat(b.scanTime),
                },
                {
                    title: '扫描类型',
                    dataIndex: 'scanType',
                },
                {
                    title: '操作',
                    dataIndex: 'operation',
                    render: (text: string, record: any) => (
                        <div>
                            {/*<Button onClick={() => this.toggleModal(record)} className="custom-link-button"*/}
                            {/*        style={{*/}
                            {/*            fontWeight: 'bold',*/}
                            {/*            border: 'transparent',*/}
                            {/*            backgroundColor: 'transparent',*/}
                            {/*            color: '#4086FF',*/}
                            {/*            marginRight: '20px',*/}
                            {/*            padding: '0 0',*/}
                            {/*        }}>忽略</Button>*/}
                            <Button onClick={() => this.toggleDetailSidebar(record.uuid)} className="custom-link-button"
                                    style={{
                                        fontWeight: 'bold',
                                        border: 'transparent',
                                        backgroundColor: 'transparent',
                                        color: '#4086FF',
                                        padding: '0 0',
                                    }}>详情</Button>
                        </div>
                    ),
                },
            ],
        };
        // 漏洞检测结果列配置
        this.expColumns = [
            // { title: 'id', dataIndex: 'id', key: 'id' },
            { title: '漏洞', dataIndex: 'bug_exp', key: 'bug_exp' },
            {
                title: '扫描时间', dataIndex: 'scanTime', key: 'scanTime',
                render: (text: string) => moment.unix(parseInt(text)).format('YYYY-MM-DD HH:mm:ss'),
                //sorter: (a: any, b: any) => parseFloat(a.scanTime) - parseFloat(b.scanTime),
            },
            {
                title: '操作',
                dataIndex: 'operation',
                render: (text: string, record: any) => (
                    <Button onClick={() => this.toggleModal(record)} className="custom-link-button"
                            disabled=
                                {(JSON.parse(localStorage.getItem('ignoredBugExps_array') || '{}')[record.uuid] || [])
                            .includes(record.bug_exp)}
                            style={{
                                fontWeight: 'bold',
                                border: 'transparent',
                                backgroundColor: 'transparent',
                                color: '#4086FF',
                            }}>忽略</Button>
                ),
            },
        ];
        // 指纹识别结果列配置
        this.fingerColumns = [
            // { title: 'id', dataIndex: 'id', key: 'id' },
            { title: '指纹', dataIndex: 'finger', key: 'finger' },
            { title: 'URL', dataIndex: 'url', key: 'url' },
            {
                title: '扫描时间', dataIndex: 'scanTime', key: 'scanTime',
                render: (text: string) => moment.unix(parseInt(text)).format('YYYY-MM-DD HH:mm:ss'),
                //sorter: (a: any, b: any) => parseFloat(a.scanTime) - parseFloat(b.scanTime),
            },
        ];
        // POC检测结果列配置
        this.pocColumns = [
            // { title: 'id', dataIndex: 'id', key: 'id' },
            { title: 'POC', dataIndex: 'bug_poc', key: 'bug_poc' },
            { title: 'URL', dataIndex: 'url', key: 'url' },
            {
                title: '扫描时间',
                dataIndex: 'scanTime',
                key: 'scanTime',
                render: (text: string) => moment.unix(parseInt(text)).format('YYYY-MM-DD HH:mm:ss'),
            },
        ];
    }

    getIgnoredBugExpsData = (ignoredBugExps_array: { [uuid: string]: string[] }) => {
        return Object.keys(ignoredBugExps_array).map(uuid => ({
            uuid,
            bugExps: ignoredBugExps_array[uuid].join(', '),
        }));
    };
    getIgnoredVulnerabilitiesCount = (ignoredBugExps_array: { [uuid: string]: string[] }) => {
        return Object.values(ignoredBugExps_array).reduce((count, bugExps) => count + bugExps.length, 0);
    };
    expandedRowRender = (record: any) => {
        // 根据子记录的类型选择对应的列配置
        const getColumns = (type: string) => {
            switch (type) {
                case 'exp':
                    return this.expColumns;
                case 'finger':
                    return this.fingerColumns;
                case 'poc':
                    return this.pocColumns;
                default:
                    return [];
            }
        };
        const isIgnored = (uuid: string, bugExp: any) => {
            const ignoredBugExps = this.state.ignoredBugExps_array[uuid] || [];
            // console.log('1111111111111111:' + ignoredBugExps);
            return ignoredBugExps.includes(bugExp);
        };
        // const isIgnored1 = (bugExp: any) => this.state.ignoredBugExps.includes(bugExp);
        return (
            <>
                {/* 漏洞检测结果子表格 */}
                <Table
                    columns={getColumns('exp')}
                    dataSource={record.vul_detection_exp_result}
                    pagination={false}
                    rowKey="id"
                    title={() => '漏洞检测结果'}
                    rowClassName={(record) => isIgnored(record.uuid, record.bug_exp) ? 'ignored-row' : ''}
                />
                {/* 指纹识别结果子表格 */}
                <Table
                    columns={getColumns('finger')}
                    dataSource={record.vul_detection_finger_result}
                    pagination={false}
                    rowKey="id"
                    title={() => '指纹识别结果'}
                />
                {/* POC检测结果子表格 */}
                <Table
                    columns={getColumns('poc')}
                    dataSource={record.vul_detection_poc_result}
                    pagination={false}
                    rowKey="id"
                    title={() => 'POC检测结果'}
                />
            </>
        );
    };

    handleIgnoreButtonClick = async (record: any) => {
        try {
            // message.info("handleIgnoreButtonClick:"+record.uuid);
            const { ignoredBugExps_array } = this.state;
            if (!ignoredBugExps_array[record.uuid]) {
                ignoredBugExps_array[record.uuid] = [];
            }
            // message.info("record.uuid:"+record.uuid)
            ignoredBugExps_array[record.uuid].push(record.bug_exp);
            localStorage.setItem('ignoredBugExps_array', JSON.stringify(ignoredBugExps_array));

            this.setState({
                currentRecord: null,
                ignoredBugExps_array,
                ignoredBugExpsData: this.getIgnoredBugExpsData(ignoredBugExps_array),
            });
        } catch (error) {
            console.error('请求错误:', error);
        }
    };
    showIgnoredExpsModal = () => {
        const ignoredBugExps_array = JSON.parse(localStorage.getItem('ignoredBugExps_array') || '{}');
        this.setState({
            showIgnoredModal: true,
            ignoredBugExpsData: this.getIgnoredBugExpsData(ignoredBugExps_array),
        });
    };
    handleRemoveIgnored = (uuid: string) => {
        const ignoredBugExps_array = JSON.parse(localStorage.getItem('ignoredBugExps_array') || '{}');
        delete ignoredBugExps_array[uuid];
        localStorage.setItem('ignoredBugExps_array', JSON.stringify(ignoredBugExps_array));
        this.setState({
            ignoredBugExps_array,
            ignoredBugExpsData: this.getIgnoredBugExpsData(ignoredBugExps_array),
        });
    };
    renderIgnoreModal = () => {
        return (
            <div>
                <Modal
                    wrapClassName="vertical-center-modal"
                    visible={this.state.showIgnoredModal}
                    title="忽略的漏洞"
                    onCancel={() => this.setState({ showIgnoredModal: false })}
                    footer={null}
                    width={600}
                    style={{ top: 20 }}
                >
                    <Table
                        className="customTable"
                        dataSource={this.state.ignoredBugExpsData}
                        rowKey="uuid"
                        pagination={{ pageSize: 5 }}
                        columns={[
                            {
                                title: 'UUID',
                                dataIndex: 'uuid',
                                key: 'uuid',
                                render: (text: string, record: any) => (
                                    <div>
                                        <Link to={`/app/detailspage?uuid=${encodeURIComponent(record.uuid)}`} target="_blank">
                                            <Button
                                                style={{
                                                    fontWeight: 'bold',
                                                    border: 'transparent',
                                                    backgroundColor: 'transparent',
                                                    color: '#4086FF',
                                                    padding: '0 0',
                                                }}
                                            >
                                                <Tooltip title={record.uuid}>
                                                    <div
                                                        style={{
                                                            whiteSpace: 'nowrap',
                                                            overflow: 'hidden',
                                                            textOverflow: 'ellipsis',
                                                            maxWidth: '150px', // 调整最大宽度
                                                        }}
                                                    >
                                                        {record.uuid || '-'}
                                                    </div>
                                                </Tooltip>
                                            </Button>
                                        </Link>
                                    </div>
                                ),
                            },
                            {
                                title: '漏洞名称',
                                dataIndex: 'bugExps',
                                key: 'bugExps',
                                render: (text: string) => (
                                    <div>
                                        <Tooltip title={text}>
                                            <div
                                                style={{
                                                    whiteSpace: 'nowrap',
                                                    overflow: 'hidden',
                                                    textOverflow: 'ellipsis',
                                                    maxWidth: '150px', // 调整最大宽度
                                                }}
                                            >
                                                {text || '-'}
                                            </div>
                                        </Tooltip>
                                    </div>
                                ),
                            },
                            {
                                title: '操作',
                                key: 'action',
                                render: (_, record) => (
                                    <Button
                                        style={{
                                            fontWeight: 'bold',
                                            padding: '0 0',
                                            border: 'transparent',
                                            backgroundColor: 'transparent',
                                            color: '#4086FF',
                                        }}
                                        onClick={() => this.handleRemoveIgnored(record.uuid)}
                                    >
                                        移出白名单
                                    </Button>
                                ),
                            },
                        ]}

                        scroll={{ y: 240 }}
                    />
                </Modal>
            </div>
        );
    };

    toggleModal = (record = null) => {
        this.setState(prevState => ({
            showModal: !prevState.showModal,
            currentRecord: record, // 设置当前记录，以便后续操作
        }));
    };
    handleOk = async () => {
        // 处理忽略操作
        const record = this.state.currentRecord;
        if (record) {
            // 调用API
            // 假设API调用的逻辑是放在handleIgnoreButtonClick方法中实现的
            await this.handleIgnoreButtonClick(record);
        }
        this.toggleModal(); // 关闭模态框
    };
    handleCancel = () => {
        this.toggleModal(); // 关闭模态框
    };
    renderModal = () => {
        return (
            <>
                <Modal
                    title="确认操作"
                    visible={this.state.showModal}
                    onOk={this.handleOk}
                    onCancel={this.handleCancel}
                    footer={[
                        <Button key="back" onClick={this.handleCancel} {...blueButton}>
                            取消
                        </Button>,
                        <Button key="submit"
                                onClick={this.handleOk}>
                            是
                        </Button>,
                    ]}
                    //style={{ top: '50%', transform: 'translateY(-50%)' }} // 添加这行代码尝试居中
                >
                    确认忽略选中的漏洞?
                </Modal>
            </>
        );
    };

    closeScanSidebar = () => {
        this.setState((prevState) => ({ isScanSidebarOpen: !prevState.isScanSidebarOpen }));
    };
    closeSidebar = () => {
        this.setState((prevState) => ({ isSidebarOpen: !prevState.isSidebarOpen }));
    };

    toggleSidebar = () => {
        this.setState((prevState) => ({ isSidebarOpen: !prevState.isSidebarOpen }));
        this.setCurrentTime();
    };
    toggleScanSidebar = () => {
        this.setState((prevState) => ({ isScanSidebarOpen: !prevState.isScanSidebarOpen }));
        this.setCurrentTime();
        // message.info('1');
    };
    toggleDetailSidebar = (uuid: string) => {
        this.setState(prevState => ({
            isSidebarOpen: !prevState.isSidebarOpen,
            selectedVulnUuid: uuid,
        }));
        this.setCurrentTime();
        //message.info('selectedVulnUuid:'+uuid);
    };


    setCurrentTime = () => {
        const now = new Date();
        // 格式化时间为 YYYY-MM-DD HH:MM:SS
        const formattedTime = now.getFullYear() + '-' +
            ('0' + (now.getMonth() + 1)).slice(-2) + '-' +
            ('0' + now.getDate()).slice(-2) + ' ' +
            ('0' + now.getHours()).slice(-2) + ':' +
            ('0' + now.getMinutes()).slice(-2) + ':' +
            ('0' + now.getSeconds()).slice(-2);
        this.setState({ currentTime: formattedTime });
    };
    onSelectChange = (selectedRowKeys: React.Key[]) => {
        this.setState({
            selectedRowKeys,
            areRowsSelected: selectedRowKeys.length > 0,
        });
    };
    // Define the rowSelection object inside the render method


    // renderRowSelection = () => {
    //     return {
    //         selectedRowKeys: this.state.selectedRowKeys,
    //         onChange: (selectedRowKeys: React.Key[]) => {
    //             this.setState({ selectedRowKeys });
    //         },
    //         // Add other rowSelection properties and methods as needed
    //     };
    // };

    handleDoneButtonClick = async (record: any) => {
        try {
            const response = await fetch('apiEndpoint', {
                method: 'POST', // 或 'GET', 根据您的API要求
                headers: {
                    'Content-Type': 'application/json',
                    // 可能还需要其他头部信息，如认证令牌
                },
                body: JSON.stringify({
                    // 这里根据API的需要发送适当的数据
                    vulnId: record.id, // 假设每条记录有唯一的id来标识漏洞
                }),
            });

            if (1) {
                // 如果API调用成功，更新状态以增加累计忽略的漏洞计数
                this.setState(prevState => ({
                    doneVulnerabilitiesCount: prevState.doneVulnerabilitiesCount + 1,
                }));
            } else {
                // 处理API调用失败的情况
                console.error('API调用失败:', response.statusText);
            }
        } catch (error) {
            console.error('请求错误:', error);
        }
    };

    renderPanelAndPieChart = (vulScanResultData:StatusItem[],totalExpResultCount:number,OriginData: any[], title: string, panelDataTitle1: string, panelDataTitle2: string, panelDataTitle3: string) => {
        if (OriginData !== undefined) {
            // 确保OriginData总是作为数组处理
            const originDataArray = Array.isArray(OriginData) ? OriginData : [OriginData];
            // let totalExpResultCount = 0;
            // originDataArray.forEach(item => {
            //     totalExpResultCount += item.vul_detection_exp_result.length;
            // });
            // const scanPanelData: StatusItem[] = [
            //     { color: '#E63F3F', label: panelDataTitle1, value: totalExpResultCount },
            //     { color: '#caa26f', label: panelDataTitle2, value: totalExpResultCount/2 },
            //     { color: '#468DFF', label: panelDataTitle3, value: 99 },
            // ];



            return (
                <Row style={{ width: '100%', marginTop: '20px', paddingRight: '10px' }}>
                    <Col span={9} style={{ paddingTop: '20px', width: '400px', height: '90px' }}>
                        <Statistic title={<span style={{ fontSize: '17px' }}>{title}</span>}
                                   value={totalExpResultCount} />
                    </Col>
                    <Col span={7} style={{ width: '400px', marginTop: '10px' }}>
                        <CustomPieChart
                            data={vulScanResultData}
                            innerRadius={27}
                            deltaRadius={2}
                            outerRadius={33}
                            cardWidth={90}
                            cardHeight={90}
                            hasDynamicEffect={true}
                        />
                    </Col>
                    <Col span={8} style={{ width: '420px', height: '100px', paddingTop: '5px', marginTop: '30px',
                        transform: 'translateY(-10%)', }}>
                        <StatusPanel scanPanelData={vulScanResultData} orientation="vertical" />
                    </Col>

                </Row>);
        } else {
            return (
                <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', width: '100%' }}>
                    <Card bordered={true}
                          style={{ backgroundColor: '#ffffff', width: '100%' }}>
                        <LoadingOutlined style={{ fontSize: '3em' }} />
                    </Card>
                </div>);
        }
    };


    renderTable = (OriginData: any[], title: string, timeColumnIndex: string[], column: any[], currentPanel: string) => {
        if (OriginData !== undefined) {
            // 确保OriginData总是作为数组处理
            const originDataArray = Array.isArray(OriginData) ? OriginData : [OriginData];
            const filteredData = originDataArray;//.filter(item => item.uuid === this.state.host_uuid)
            if (filteredData.length > 0) {
                return (
                    <div style={{ fontWeight: 'bolder', width: '100%' }}>
                        <Card bordered={true}
                              style={{ backgroundColor: '#ffffff' }}>
                            <Row>
                                <div style={{
                                    display: 'flex',
                                    justifyContent: 'space-between',
                                    marginBottom: 8,
                                    fontWeight: 'bold',
                                }}>
                                    <h2 style={{
                                        fontFamily: 'Microsoft YaHei, SimHei, Arial, sans-serif',
                                        fontSize: '18px',
                                        fontWeight: 'bold',
                                        marginLeft: '0px',
                                    }}>{title}</h2>
                                </div>
                            </Row>
                            <DataDisplayTable
                                externalDataSource={filteredData}
                                apiEndpoint={Vul_Data_API}
                                timeColumnIndex={timeColumnIndex}
                                columns={column}
                                currentPanel={currentPanel}
                                expandedRowRender={this.expandedRowRender}
                                indentSize={15} // 设置缩进大小，单位是像素
                                childrenColumnName="children" // 指定子数据的属性名称
                                searchColumns={['uuid', 'port']}
                            />
                        </Card>
                    </div>
                );
            }
        }
        return (
            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', width: '100%' }}>
                <Card bordered={true}
                      style={{ backgroundColor: '#ffffff', width: '100%' }}>
                    <LoadingOutlined style={{ fontSize: '3em' }} />
                </Card>
            </div>
        );
    };


    render() {
        const { isSidebarOpen, isScanSidebarOpen, selectedDateRange, currentTime } = this.state;

        const ignoredVulnerabilitiesCount = this.getIgnoredVulnerabilitiesCount(this.state.ignoredBugExps_array);
        // const vulScanResultData: StatusItem[] = [
        //     { color: 'green', label: '通过项', value: 7 },
        //     { color: '#E53F3F', label: '严重风险项', value: 1 },
        //     { color: '#846BCE', label: '高危风险项', value: 1 },
        //     { color: '#FEC745', label: '中危风险项', value: 1 },
        //     { color: '#468DFF', label: '低危风险项', value: 1 },
        // ];


        return (
            <DataContext.Consumer>
                {(context: DataContextType | undefined) => {
                    if (!context) {
                        return (
                            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
                                <LoadingOutlined style={{ fontSize: '3em' }} />
                            </div>); // 或者其他的加载状态显示
                    }
                    // 从 context 中解构出 topFiveFimData 和 n
                    const { vulnOriginData, vulnHostCount } = context;
                    if (vulnOriginData !== undefined) {
                        // 确保OriginData总是作为数组处理
                        const originDataArray = Array.isArray(vulnOriginData) ? vulnOriginData : [vulnOriginData];
                        let totalExpResultCount = 0;
                        originDataArray.forEach(item => {
                            totalExpResultCount += item.vul_detection_exp_result.length;
                        });

                        const vulScanResultData: StatusItem[] = [
                            { color: '#E63F3F', label: '高风险项', value: totalExpResultCount },
                            { color: '#caa26f', label: '中风险项', value: totalExpResultCount/2 },
                            { color: '#468DFF', label: '低风险项', value: 9 },
                        ];

                        let highRiskCount = 0;
                        let mediumRiskCount = 0;
                        let lowRiskCount = 0;

                        originDataArray.forEach(item => {
                            if (item && Array.isArray(item.vul_detection_exp_result)) {
                                item.vul_detection_exp_result.forEach((result: { type: any; }) => {
                                    if (result && typeof result.type === 'number') {
                                        switch (result.type) {
                                            case 0:
                                                highRiskCount++;
                                                break;
                                            case 1:
                                                mediumRiskCount++;
                                                break;
                                            case 2:
                                                lowRiskCount++;
                                                break;
                                            default:
                                                console.warn(`Unexpected risk type: ${result.type}`);
                                                break;
                                        }
                                    } else {
                                        console.warn('Invalid result or result.type', result);
                                    }
                                });
                            } else {
                                console.warn('Invalid item or item.vul_detection_exp_result', item);
                            }
                        });

                        const vulScanResultData1: StatusItem[] = [
                            { color: '#E63F3F', label: '高风险项', value: highRiskCount },
                            { color: '#caa26f', label: '中风险项', value: mediumRiskCount },
                            { color: '#468DFF', label: '低风险项', value: lowRiskCount },
                        ];


                        return (
                            <div style={{ fontWeight: 'bold' }}>
                                {this.renderModal()}
                                {this.renderIgnoreModal()}
                                {/* <MetaDataDisplay
              metadata={vulnMetaData_uuid}
              /> */}
                                <Row gutter={[12, 6]}/*(列间距，行间距)*/>
                                    <Col span={24}>
                                        <Row gutter={[12, 6]} style={{ marginTop: '10px' }}>
                                            <Col span={24}>
                                                <Card bordered={false} /*title="主机状态分布" 产生分界线*/
                                                      style={{ fontWeight: 'bolder', width: '100%', height: 220 }}>
                                                    <div style={{
                                                        display: 'flex',
                                                        justifyContent: 'space-between',
                                                        marginBottom: 16,
                                                        fontWeight: 'bold',
                                                    }}>
                                                        <h2 style={{
                                                            fontFamily: 'Microsoft YaHei, SimHei, Arial, sans-serif',
                                                            fontSize: '18px',
                                                            fontWeight: 'bold',
                                                            marginLeft: '0px',
                                                        }}>漏洞概览</h2>
                                                    </div>
                                                    <Row gutter={[6, 6]}>
                                                        <Col span={4}
                                                             style={{ marginLeft: '15px', marginTop: '10px' }}>
                                                            <div className="container">
                                                                <Row gutter={24}>
                                                                    <h2 style={{ fontSize: '16px' }}>最近扫描时间: </h2>
                                                                    <span className="currentTime" style={{
                                                                        marginRight: '10px',
                                                                        marginBottom: '8px',
                                                                    }}>{currentTime}</span>
                                                                    <Button
                                                                        style={{
                                                                            backgroundColor: '#1664FF',
                                                                            color: 'white',
                                                                            marginRight: '10px',
                                                                            transition: 'opacity 0.3s', // 添加过渡效果
                                                                            opacity: 1, // 初始透明度
                                                                        }}
                                                                        onMouseEnter={(e) => {
                                                                            e.currentTarget.style.opacity = 0.7;
                                                                        }} // 鼠标进入时将透明度设置为0.5
                                                                        onMouseLeave={(e) => {
                                                                            e.currentTarget.style.opacity = 1;
                                                                        }} // 鼠标离开时恢复透明度为1
                                                                        onClick={this.toggleScanSidebar}>立即扫描
                                                                    </Button>
                                                                    <Button onClick={this.showIgnoredExpsModal}>白名单</Button>
                                                                </Row>
                                                                <div
                                                                    className={isScanSidebarOpen ? 'overlay open' : 'overlay'}
                                                                    onClick={this.closeScanSidebar} />
                                                                <div
                                                                    className={isScanSidebarOpen ? 'smallsidebar open' : 'smallsidebar'}>
                                                                    <button onClick={this.toggleScanSidebar}
                                                                            className="close-btn">&times;</button>
                                                                    <VulnerabilityScanSidebar
                                                                        scanInfo={['漏洞检查', '漏洞扫描中，请稍后', '返回漏洞列表，查看详情']}
                                                                        riskItemCount={totalExpResultCount} // 传递风险项的数量
                                                                        hostCount={vulnHostCount}
                                                                        statusData={vulScanResultData}
                                                                        isSidebarOpen={this.state.isScanSidebarOpen}
                                                                        toggleSidebar={this.toggleScanSidebar}
                                                                    />
                                                                </div>
                                                                <div
                                                                    className={isSidebarOpen ? 'overlay open' : 'overlay'}
                                                                    onClick={this.closeSidebar} />
                                                                    <VulnerabilityDetailsSidebar
                                                                        //vulnOriginData={vulnOriginData}
                                                                        //vulnInfoArray={getSelectedVulnDetails()}
                                                                        onDoneButtonClick={this.handleDoneButtonClick}//点击‘处理’按键
                                                                        toggleSidebar={this.toggleSidebar}
                                                                        host_uuid={this.state.selectedVulnUuid}
                                                                        isSidebarOpen={this.state.isSidebarOpen}
                                                                    />
                                                            </div>
                                                        </Col>
                                                        <Col span={9}>
                                                            <Card
                                                                bordered={false}
                                                                style={{
                                                                    height: '100px',
                                                                    width: '470px',
                                                                    minWidth: '200px', // 最小宽度300px，而非100px
                                                                    display: 'flex',
                                                                    alignItems: 'center',
                                                                    justifyContent: 'center',
                                                                    backgroundColor: '#F6F7FB', // 设置Card的背景颜色
                                                                }}
                                                            >
                                                                {this.renderPanelAndPieChart(vulScanResultData,totalExpResultCount-ignoredVulnerabilitiesCount,
                                                                    vulnOriginData, '待处理高可利用漏洞',
                                                                    '高风险项', '中风险项', '低风险项')}

                                                            </Card>
                                                        </Col>
                                                        {/*<Col span={5}>*/}
                                                        {/*    <Card*/}
                                                        {/*        bordered={false}*/}
                                                        {/*        style={{*/}
                                                        {/*            height: '100px',*/}
                                                        {/*            width: '260px',*/}
                                                        {/*            minWidth: '200px', // 最小宽度300px，而非100px*/}
                                                        {/*            display: 'flex',*/}
                                                        {/*            alignItems: 'center',*/}
                                                        {/*            justifyContent: 'center',*/}
                                                        {/*            backgroundColor: '#F6F7FB', // 设置Card的背景颜色*/}
                                                        {/*        }}*/}
                                                        {/*    >*/}
                                                        {/*        <Row>*/}
                                                        {/*            <Col pull={2} span={24}*/}
                                                        {/*                 style={{ marginRight: '50px' }}>*/}
                                                        {/*                <Statistic title={<span>累计处理的漏洞</span>}*/}
                                                        {/*                           value={this.state.doneVulnerabilitiesCount} />*/}
                                                        {/*            </Col>*/}

                                                        {/*        </Row>*/}
                                                        {/*    </Card>*/}
                                                        {/*</Col>*/}

                                                        <Col span={1} />
                                                        <Col span={7}
                                                             style={{ marginLeft: '10px' }}>
                                                            <Card
                                                                bordered={false}
                                                                style={{
                                                                    height: '100px',
                                                                    width: '440px',
                                                                    minWidth: '200px', // 最小宽度300px，而非100px
                                                                    display: 'flex',
                                                                    alignItems: 'center',
                                                                    justifyContent: 'center',
                                                                    backgroundColor: '#F6F7FB', // 设置Card的背景颜色
                                                                }}
                                                            >
                                                                <Row>
                                                                    <Col pull={2} span={24}
                                                                         style={{
                                                                             marginRight: '50px',
                                                                             transform: 'translateX(-50%)',
                                                                         }}>
                                                                        <Statistic title={<span style={{fontSize:'16px'}}>累计忽略的漏洞</span>}
                                                                                   value={ignoredVulnerabilitiesCount} />
                                                                    </Col>
                                                                </Row>
                                                            </Card>
                                                        </Col>
                                                    </Row>

                                                </Card>
                                            </Col>
                                        </Row>
                                    </Col>
                                    <Col span={24}>
                                        {this.renderTable(vulnOriginData, '漏洞扫描结果', ['scanTime'],
                                            this.state.vulncolumns, 'vulnerabilityDetect')}
                                    </Col>
                                </Row>
                            </div>
                        );
                    }
                }
                }
            </DataContext.Consumer>
        );
    }
}


export default VulnerabilityList;