
import React from 'react';
import { Row, Col, Card, Modal, Button, message, Statistic } from 'antd';
import { Link } from 'react-router-dom';
import BreadcrumbCustom from '../widget/BreadcrumbCustom';
import VulnerabilityScanSidebar from './ScanProcessSidebar';
import MetaDataDisplay from '../AssetsCenter/MetaDataDisplay';
import FetchAPIDataTable from '../AssetsCenter/FetchAPIDataTable';
import VulnerabilityDetailsSidebar from './VulnerabilityDetailsSidebar';
import CustomPieChart from '../AssetsCenter/CustomPieChart';
import { StatusItem } from '../tableUtils';
import '../SideMenu/SidebarStyle.css';
import { DataContext, DataContextType} from '../ContextAPI/DataManager'

type RangeValue<T> = [T | null, T | null] | null;

interface vulnerablityProps{};
interface vulnerablityState {
  columns:any[];
  selectedVulnUuid:string;
  ignoredVulnerabilitiesCount:number;
  doneVulnerabilitiesCount:number;
  // ...其他状态字段
  showModal: boolean, // 控制模态框显示
  currentRecord: any, // 当前选中的记录
  currentTime: string;

  count: number;
  deleteIndex: number | null;
  selectedRowKeys: React.Key[];
  selectedDateRange: [string | null, string | null];
  activeIndex: any;
  areRowsSelected: boolean;
  isSidebarOpen: boolean;
  riskItemCount: number;
  
};



interface StatusPanelProps {
  scanPanelData: StatusItem[];
  orientation: 'vertical' | 'horizontal'; // 添加方向属性
}

const StatusPanel: React.FC<StatusPanelProps> = ({ scanPanelData, orientation }) => {
  const containerStyle: React.CSSProperties = {
    //border:'5px solid black',
    display: 'flex',
    flexDirection: orientation === 'vertical' ? 'column' : 'row',
    alignItems: 'flex-start',
    gap: orientation === 'horizontal' ? '7px' : '0', // 设置水平方向的间隔
  };

  const itemStyle: React.CSSProperties = {
    display: 'flex',
    justifyContent: orientation === 'vertical' ? 'space-between' : 'flex-start',
    alignItems: 'center',
    width: orientation === 'vertical' ? '100%' : undefined,
  };

  const valueStyle: React.CSSProperties = {
    marginLeft: orientation === 'vertical' ? '40px' : '0', // 设置垂直方向的间隔
  };

  return (
    <div style={containerStyle}>
      {scanPanelData.map((status, index) => (
        <div key={index} style={itemStyle}>
          <span style={{
            height: '10px',
            width: '10px',
            backgroundColor: status.color,
            borderRadius: '50%',
            display: 'inline-block',
            marginRight: '8px'
          }}></span>
          <span style={{ flexGrow: 1 }}>{status.label}</span>
          {orientation === 'vertical' && (
            <span style={valueStyle}>{status.value}</span>
          )}
        </div>
      ))}
    </div>
  );
};

class VulnerabilityList extends React.Component<vulnerablityProps, vulnerablityState> {
  constructor(props: any) {
    super(props);
    this.state = {
      
      // ...其他状态字段
      showModal: false, // 控制模态框显示
      currentRecord: null, // 当前选中的记录
      selectedVulnUuid: '', // 添加状态来存储当前选中的漏洞 id
      ignoredVulnerabilitiesCount: 0, // 初始化为0或从其他数据源加载的初始值
      doneVulnerabilitiesCount: 0, // 初始化为0或从其他数据源加载的初始值
      isSidebarOpen: false,
      currentTime: '2023-12-28 10:30:00', // 添加用于存储当前时间的状态变量

      count: 2,
      deleteIndex: -1,
      activeIndex:[-1,-1,-1,-1],
      selectedRowKeys: [], // 这里用来存储勾选的行的 key 值
      areRowsSelected: false,
      selectedDateRange: [null, null],
      riskItemCount: 5, // 初始化风险项的数量
      columns:[
        {
          title: 'ID',
          dataIndex: 'id',
          key: 'id',
        },
        {
            title: "主机名称",
            dataIndex: 'uuid',
            render: (text: string) => (
                // 使用模板字符串构造带查询参数的路径,encodeURIComponent 函数确保 text 被正确编码
                <Link to={`/app/detailspage?uuid=${encodeURIComponent(text)}`} target="_blank">
                  <Button style={{fontWeight:'bold',border:'transparent',backgroundColor:'transparent',color:'#4086FF'}}>{text.slice(1,4)}</Button>
                </Link>
              ),
        },
        {
          title: '主机IP',
          dataIndex: 'ip',
        },
        {
          title: '端口',
          dataIndex: 'port',
        },
        {
          title: '扫描时刻',
          dataIndex: 'scanTime',
        },
        {
          title: '扫描类型',
          dataIndex: 'scanType',
        },
        
        {
            title: "操作",
            dataIndex: 'operation',
            
            render: (text:string, record:any) => (
                <div>
                  <Button onClick={() => this.toggleModal(record)} className="custom-link-button">忽略</Button>
                  <Button onClick={() => this.toggleDetailSidebar(record.uuid)} className="custom-link-button">详情</Button>
                </div>
              ),
        },
      ],
    };
  }

  toggleModal = (record = null) => {
    this.setState(prevState => ({
      showModal: !prevState.showModal,
      currentRecord: record // 设置当前记录，以便后续操作
    }));
  }
  
  handleOk = async () => {
    // 处理忽略操作
    const record = this.state.currentRecord;
    if (record) {
      // 调用API
      // 假设API调用的逻辑是放在handleIgnoreButtonClick方法中实现的
      await this.handleIgnoreButtonClick(record);
    }
    this.toggleModal(); // 关闭模态框
  }
  
  handleCancel = () => {
    this.toggleModal(); // 关闭模态框
  }
  
  handleIgnoreButtonClick = async (record:any) => {
    try {
      const response = await fetch('apiEndpoint', {
        method: 'POST', // 或 'GET', 根据您的API要求
        headers: {
          'Content-Type': 'application/json',
          // 可能还需要其他头部信息，如认证令牌
        },
        body: JSON.stringify({
          // 这里根据API的需要发送适当的数据
          vulnId: record.id, // 假设每条记录有唯一的id来标识漏洞
        }),
      });
  
      if (1) {
        // 如果API调用成功，更新状态以增加累计忽略的漏洞计数
        this.setState(prevState => ({
          ignoredVulnerabilitiesCount: prevState.ignoredVulnerabilitiesCount + 1,
        }));
      } else {
        // 处理API调用失败的情况
        console.error('API调用失败:', response.statusText);
      }
    } catch (error) {
      console.error('请求错误:', error);
    }
  }
  handleDoneButtonClick = async (record:any) => {
    try {
      const response = await fetch('apiEndpoint', {
        method: 'POST', // 或 'GET', 根据您的API要求
        headers: {
          'Content-Type': 'application/json',
          // 可能还需要其他头部信息，如认证令牌
        },
        body: JSON.stringify({
          // 这里根据API的需要发送适当的数据
          vulnId: record.id, // 假设每条记录有唯一的id来标识漏洞
        }),
      });
  
      if (1) {
        // 如果API调用成功，更新状态以增加累计忽略的漏洞计数
        this.setState(prevState => ({
          doneVulnerabilitiesCount: prevState.doneVulnerabilitiesCount + 1,
        }));
      } else {
        // 处理API调用失败的情况
        console.error('API调用失败:', response.statusText);
      }
    } catch (error) {
      console.error('请求错误:', error);
    }
  }
  renderModal = () => {
    return (
      <>
        <Modal
          title="确认操作"
          visible={this.state.showModal}
          onOk={this.handleOk}
          onCancel={this.handleCancel}
          footer={[
            <Button key="back" onClick={this.handleCancel}>
              取消
            </Button>,
            <Button key="submit" style={{backgroundColor:'#1664FF',color:'white'}} onClick={this.handleOk}>
              是
            </Button>,
          ]}
        //style={{ top: '50%', transform: 'translateY(-50%)' }} // 添加这行代码尝试居中
        >
          确认忽略选中的漏洞？
        </Modal>
      </>
    );
  };
  
  toggleSidebar = () => {
    this.setState((prevState) => ({ isSidebarOpen: !prevState.isSidebarOpen }));
    this.setCurrentTime();
  };

  toggleDetailSidebar = (uuid:string) => {
    this.setState(prevState => ({
        isSidebarOpen: !prevState.isSidebarOpen,
        selectedVulnUuid: uuid,
    }));
    this.setCurrentTime();
    //message.info('selectedVulnUuid:'+uuid);
  };

  closeSidebar = () => {
    this.setState((prevState) => ({ isSidebarOpen: !prevState.isSidebarOpen }));
  };


  setCurrentTime = () => {
    const now = new Date();
    // 格式化时间为 YYYY-MM-DD HH:MM:SS
    const formattedTime = now.getFullYear() + '-' +
                          ('0' + (now.getMonth() + 1)).slice(-2) + '-' +
                          ('0' + now.getDate()).slice(-2) + ' ' +
                          ('0' + now.getHours()).slice(-2) + ':' +
                          ('0' + now.getMinutes()).slice(-2) + ':' +
                          ('0' + now.getSeconds()).slice(-2);
    this.setState({ currentTime: formattedTime });
  };
  onSelectChange = (selectedRowKeys: React.Key[]) => {
    this.setState({
      selectedRowKeys,
      areRowsSelected: selectedRowKeys.length > 0,
    });
  };
  // Define the rowSelection object inside the render method



  renderRowSelection = () => {
    return {
      selectedRowKeys: this.state.selectedRowKeys,
      onChange: (selectedRowKeys: React.Key[]) => {
        this.setState({ selectedRowKeys });
      },
      // Add other rowSelection properties and methods as needed
    };
  };

  handleMouseEnter = (_: any, index: number) => {
    // 使用 map 来更新数组中特定索引的值
    this.setState(prevState => ({
      activeIndex: prevState.activeIndex.map((val: number, i: number) => (i === index ? index : val)),
    }));
  };

  handleMouseLeave = () => {
    // 重置所有索引为 -1
    this.setState({
      activeIndex: this.state.activeIndex.map(() => -1),
    });
  };



  render() {
    const { isSidebarOpen, selectedRowKeys, selectedDateRange, currentTime } = this.state;
    // Conditional button style

    // 状态数据
    const scanPanelData: StatusItem[] = [
      { color: '#E63F3F', label: '风险项', value: 1 },
      { color: '#468DFF', label: '通过项', value: 1 },
      // { color: '#846BCE', label: '高危', value: 1 },
      // { color: '#FEC745', label: '中危', value: 1 },
    ];
    const scanResultData: StatusItem[] = [
      { color: 'green', label: '通过项', value: 7 },
      { color: '#E53F3F', label: '严重风险项', value: 1 },
      { color: '#846BCE', label: '高危风险项', value: 1 },
      { color: '#FEC745', label: '中危风险项', value: 1 },
      { color: '#468DFF', label: '低危风险项', value: 1 },
    ];
        //扇形图数据
        const vulDataOne:StatusItem[] = [
          { label: '严重', value: 1, color: '#E63F3F' },
          { label: '高危', value: 1, color: '#846BCE' },
          { label: '中危', value: 1, color: '#FEC745' },
          { label: '低危', value: 1, color: '#468DFF' }
      ];

      return(
        <DataContext.Consumer>
        {(context: DataContextType | undefined) => {
        if (!context) {
            return <div>Loading...</div>; // 或者其他的加载状态显示
        }
        // 从 context 中解构出 topFiveFimData 和 n
        const { vulnMetaData_uuid,vulnMetaData_scanTime, fetchLatestData} = context;
        const scanPanelData: StatusItem[] = [
          { color: '#E63F3F', label: '风险项', value: vulnMetaData_scanTime.tupleCount },
          { color: '#468DFF', label: '通过项', value: 99 },
          // { color: '#846BCE', label: '高危', value: 1 },
          // { color: '#FEC745', label: '中危', value: 1 },
        ];
        const scanResultData: StatusItem[] = [
          { color: 'green', label: '通过项', value: vulnMetaData_scanTime.tupleCount },
          { color: '#E53F3F', label: '严重风险项', value: 99 },
          // { color: '#846BCE', label: '高危风险项', value: 1 },
          // { color: '#FEC745', label: '中危风险项', value: 1 },
          // { color: '#468DFF', label: '低危风险项', value: 1 },
        ];

       return (
          <div style={{ fontFamily: "'YouYuan', sans-serif", fontWeight
          : 'bold' }}>
            {this.renderModal()}
            {/* <MetaDataDisplay
              metadata={vulnMetaData_uuid}
              /> */}
            <Row gutter={[12, 6]}/*(列间距，行间距)*/>
              <Col className="gutter-row" span={24}>    
                <Row gutter={[12, 6]} style={{ marginTop: '10px' }}>
                    {/* 每个 Col 组件占据 6 份，以确保在一行中平均分布 */}
                    <Col className="gutter-row" span={24} >
                    <Card bordered={false} /*title="主机状态分布" 产生分界线*/
                      style={{fontWeight: 'bolder', width: '100%', height:220}}>
                      <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 16 ,fontWeight: 'bold'}}>
                          <h2 style={{ fontSize:'18px',fontWeight: 'bold', marginLeft: '0px' }}>漏洞概览</h2>
                      </div>
                      <Row gutter={[6, 6]}>
                        <Col className="gutter-row" span={4} style={{ marginLeft: '15px',marginTop: '10px' }}>
                          <div className="container">
                            <Row gutter={24}>
                              <h2 style={{ fontSize: '16px' }}>最近扫描时间（每日自动扫描）</h2>
                              <span className="currentTime" style={{ marginRight: '10px',marginBottom:'8px' }}>{currentTime}</span>
                              <Button style={{backgroundColor:'#1664FF',color:'white'}} 
                              onClick={() => this.toggleSidebar}>立即扫描</Button>
                            </Row>
                            <div className={isSidebarOpen ? "overlay open" : "overlay"} onClick={this.closeSidebar}></div>
                            <div className={isSidebarOpen ? "sidebar open" : "sidebar"}>
                              <button onClick={() => this.toggleSidebar} className="close-btn">&times;</button>
                              <VulnerabilityScanSidebar
                                scanInfo={['漏洞检查','漏洞扫描中，请稍后',"返回漏洞列表，查看详情"]}
                                statusData={scanResultData}
                                isSidebarOpen={this.state.isSidebarOpen}
                                toggleSidebar={this.toggleSidebar}
                                riskItemCount={this.state.riskItemCount} // 传递风险项的数量
                              />
                              {
                                <VulnerabilityDetailsSidebar
                                  //vulnOriginData={vulnOriginData}
                                  //vulnInfoArray={getSelectedVulnDetails()}
                                  onDoneButtonClick={this.handleDoneButtonClick}//点击‘处理’按键
                                  toggleSidebar={this.toggleSidebar}
                                  host_uuid={this.state.selectedVulnUuid}
                                  isSidebarOpen={this.state.isSidebarOpen}
                                />
                              }
                            </div>
                          </div>
                        </Col>
                        <Col className="gutter-row" span={9}>
                          <Card
                            bordered={false}
                            style={{
                                height: '100px',
                                width: '470px',
                                minWidth: '200px', // 最小宽度300px，而非100px
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                                backgroundColor: '#F6F7FB', // 设置Card的背景颜色
                            }}
                            >
                            <Row style={{ width: '100%',marginTop: '0px',paddingRight: '10px' }}>
                                <Col span={8} style={{ paddingTop:'20px',width:'400px',height:'90px'}}>
                                    <Statistic title={<span>待处理高可利用漏洞</span>} value={vulnMetaData_uuid.tupleCount} />
                                </Col>
                                <Col span={9} style={{ width:'400px'}}>
                                  <CustomPieChart
                                    data={vulDataOne}
                                    innerRadius={27}
                                    deltaRadius={2}
                                    outerRadius={33}
                                    cardWidth={90}
                                    cardHeight={90}
                                    hasDynamicEffect={true}
                                    />
                                </Col>
                                <Col span={7} style={{ width:'420px',height:'100px',paddingTop:'5px'}}>
                                    <StatusPanel scanPanelData={scanPanelData} orientation="vertical" />
                                </Col>
                                
                            </Row>
                          </Card>
                        </Col>
                        <Col className="gutter-row" span={5}>
                          <Card
                            bordered={false}
                            style={{
                                height: '100px',
                                width: '260px',
                                minWidth: '200px', // 最小宽度300px，而非100px
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                                backgroundColor: '#F6F7FB', // 设置Card的背景颜色
                            }}
                            >
                            <Row>
                                <Col pull={2} span={24} style={{ marginRight: '50px'}}>
                                    <Statistic title={<span>累计处理的漏洞</span>} value={this.state.doneVulnerabilitiesCount} />
                                </Col>
                                
                            </Row>
                          </Card>
                        </Col>              
                        <Col className="gutter-row" span={5}style={{ marginLeft: '10px' }}>
                          <Card
                            bordered={false}
                            style={{
                                height: '100px',
                                width: '240px',
                                minWidth: '200px', // 最小宽度300px，而非100px
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                                backgroundColor: '#F6F7FB', // 设置Card的背景颜色
                            }}
                            >
                            <Row>
                                <Col pull={2} span={24} style={{ marginRight: '50px'}}>
                                    <Statistic title={<span>累计忽略的漏洞</span>} value={this.state.ignoredVulnerabilitiesCount} />
                                </Col>
                                
                            </Row>
                          </Card>
                        </Col> 
                      </Row>
    
                    </Card>
                    </Col>
                </Row>
              </Col>  
              <Col span={24}>
                  <div className="gutter-box">
                  <Card bordered={false}>
                      <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 16 ,fontWeight: 'bold'}}>
                          <h2 style={{ fontWeight: 'bold' }}>漏洞内容</h2>
                      </div>
                      <FetchAPIDataTable
                        //apiEndpoint="http://localhost:5000/api/vulndetetion/query?uuid=192.168.1.10"
                        apiEndpoint="http://localhost:5000/api/vulndetetion/all"
                        timeColumnIndex={['scanTime']}
                        //columns={openPortsColumns}
                        columns={this.state.columns}
                        currentPanel="vulnerabilityDetect"
                        />
                      </Card>
                  </div>
              </Col>
            </Row>
          </div>
        );
        }}
        </DataContext.Consumer>
    )
  }
}


export default VulnerabilityList;