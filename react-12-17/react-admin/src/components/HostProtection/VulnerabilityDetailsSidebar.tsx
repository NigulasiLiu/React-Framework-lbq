import React from 'react';
import { Row, Col,Card,Typography, Button, Input, Select, Form, Modal } from 'antd';
import { StatusItem,} from '../tableUtils';
import MetaDataDisplay from '../AssetsCenter/MetaDataDisplay';
import FetchAPIDataTable from '../AssetsCenter/FetchAPIDataTable';
import { DataContext, DataContextType} from '../ContextAPI/DataManager'
import { FilteredDataResult } from '../ContextAPI/useFilterOriginData';
import DisplayFilteredData from '../ContextAPI/DisplayFilteredData';
const { Text } = Typography;

      
interface VulnerabilityDetailsSidebarState {
    showModal:boolean;
    isSidebarOpen: boolean;
    statusData:StatusItem[]

    vulnName:string;
    vulnBugExp:string;
    vulnType:string;
    poc:string;
    finger:string;
    isExp:boolean;

    columns:any[];
}
// 定义 VulnerabilityDetailsSidebar 组件的 Props 类型
interface VulnerabilityDetailsSidebarProps {
    host_ip:string;
    //vulnInfoArray:VulnerabilityDetailsItemType;

    isSidebarOpen: boolean;
    toggleSidebar: () => void;
  }

class VulnerabilityDetailsSidebar extends React.Component<VulnerabilityDetailsSidebarProps,VulnerabilityDetailsSidebarState> {
  constructor(props:any) {
    super(props);
    this.state = {
        
        showModal:false,
        vulnName:'',
        vulnBugExp:'',
        vulnType:'',
        poc:'',
        finger:'',
        isExp:false,

      isSidebarOpen: false,
      statusData: [
        { label: '通过项', value: 0, color: 'green' },
        { label: '严重风险项', value: 2, color: '#E53F3F' },
        { label: '高风险项', value: 3, color: 'orange' },
        { label: '中风险项', value: 2, color: 'yellow' },
        { label: '低风险项', value: 0, color: 'blue' },
      ],
      columns:[
        { title: '影响主机', dataIndex: 'ip', key: 'ip' },
        { title: '发现时间', dataIndex: 'scanTime', 
        sorter: (a: any, b: any) => Date.parse(b.scanTime) - Date.parse(a.scanTime), 
    },
        {
            title: "操作",
            dataIndex: 'operation',
            
            render: (text:string, record:any) => (
                <div>
                  <Button className="custom-link-button">忽略</Button>
                  <Button className="custom-link-button">处理</Button>
                  <Button onClick={this.showModal} className="custom-link-button">详情</Button>
                </div>
              ),
        },
    ],
    };
  }
componentDidMount(): void {
    this.setState({
        vulnName:'名称',
        poc:'危险等级',
        finger:'危险等级',
        isExp:false,
        

    })
}
  toggleSidebar = () => {
    this.setState((prevState) => ({ isSidebarOpen: !prevState.isSidebarOpen }));
  };

    handleOk = () => {
      this.setState({
        showModal: false,
      });
      // 这里处理确认操作
    };
  
    handleCancel = () => {
      this.setState({
        showModal: false,
      });
    };
    formItemLayout = {
        labelCol: {
          xs: { span: 24 },
          sm: { span: 6 },
        },
        wrapperCol: {
          xs: { span: 24 },
          sm: { span: 14 },
        },
      };
  // 显示模态框的方法
  showModal = () => {
    this.setState({ showModal: true });
  };

  // 关闭模态框的方法
  closeModal = () => {
    this.setState({ showModal: false });
  };
//   renderStatusList = () => {
//     return this.props.statusData.map((item, index) => (
//         <div key={index} style={{ display: 'flex', alignItems: 'center', marginTop: '18px',marginLeft: '6px'}}>
//           <span style={{
//             height: '15px',
//             width: '15px',
//             backgroundColor: item.color,
//             borderRadius: '50%',
//             display: 'inline-block',
//             marginRight: '10px',
//           }}></span>
//           <span style={{ flexGrow: 1, fontSize: '14px' }}>{item.label}</span>
//           <span>{item.value}</span>
//         </div>
//       ));
//   };

renderModal = () => {
    return (
      <>
      {/* <Button type="primary" onClick={this.showModal}>
        新建 SHA256 任务
      </Button> */}
      <Modal
      style={{fontWeight:'bolder'}}
        title="新增用户"
        visible={this.state.showModal}
        onOk={this.handleOk}
        onCancel={this.handleCancel}
        footer={[
          <Button style={{backgroundColor:'white',color:'black'}} key="back" onClick={this.handleCancel}>
            取消
          </Button>,
          <Button style={{backgroundColor:'#1664FF',color:'white'}} key="submit" type="primary" onClick={this.handleOk}>
            提交任务
          </Button>,
        ]}
      >
          <Form {...this.formItemLayout}
              name="new_user_info"
          >
              <Form.Item
              label="用户名"
              name="username"
              rules={[{ required: true, message: '用户名支持中英文和数字，不少于四个字符' }]}
              >
              <Input placeholder="用户名支持中英文和数字，不少于四个字符" />
              </Form.Item>
              <Form.Item
              label="密码"
              name="password"
              rules={[{ required: true, message: '密码长度不少于4个字符' }]}
              >
              <Input placeholder="密码长度不少于4个字符" />
              </Form.Item>
              <Form.Item
              label="确认密码"
              name="password"
              rules={[{ required: true, message: '请再次输入密码' }]}
              >
              <Input placeholder="请再次输入密码" />
              </Form.Item>
              <Form.Item
              label="用户角色"
              name="cycle"
              rules={[{ required: true, message: '请选择用户角色' }]}
              >

              </Form.Item>
              
          </Form>
      </Modal>
    </>
    );
  };
  render() {
    const { isSidebarOpen, toggleSidebar,} = this.props;

        return(
            <DataContext.Consumer>
            {(context: DataContextType | undefined) => {
            if (!context) {
                return <div>Loading...</div>; // 或者其他的加载状态显示
            }
            // 从 context 中解构出 topFiveFimData 和 n
            const { vulnMetaData,vulnFilteredData,transformedData} = context;

            return (
            <div className={isSidebarOpen ? "sidebar open" : "sidebar"}>
                
    <div>
      {transformedData.length > 0 ? (
        <ul>
          {transformedData.map((item, index) => (
            <li key={index}>
              IP: {item.ip}, Port: {item.port}, Bug Exploit: {item.vul_detection_exp_result_bug_exp || 'N/A'}
            </li>
          ))}
        </ul>
      ) : (
        <p>No data available.</p>
      )}
    </div>
                {/* <DisplayFilteredData
                 filterData={vulnFilteredData}                
                /> */}
            {/* <MetaDataDisplay
            metadata={vulnMetaData}
            /> */}
                <Row style={{width:'100%'}}>
                <Col md={24} style={{borderTop: '5px solid #4086FF'}}>
                <Row>
                    <Card style={{width: 800, borderTop:'1px solid black',}}>
                        <Row style={{borderBottom:'1px solid black'}}>
                        <div style={{fontSize:18}}>
                            {0}
                        </div>
                        </Row>
                        <Row>
                            <Row>
                                <div style={{fontSize:14, marginTop:'13px', marginBottom:'13px',}}>漏洞信息</div>
                            </Row>
                            {/* <Row>
                                {Object.entries(data).map(([key, value], index) => (
                                    <Col key={index} span={8} style={{ fontSize:'12px',marginBottom: '8px' }}>
                                        <Row>
                                    <Text style={{color:'grey', marginTop:'3px', marginBottom:'3px',}}strong>{key}</Text> 
                                        </Row>
                                        <Row>
                                    <Text style={{marginTop:'3px', marginBottom:'3px',}}>{value}</Text>
                                    </Row>
                                    </Col>
                                ))}
                                <Text>
                                <Col span={24} style={{ fontSize:'12px',marginBottom: '8px' }}>
                                        <Row>
                                    <Text style={{color:'grey', marginTop:'3px', marginBottom:'3px',}}strong>{'漏洞概述'}</Text> 
                                        </Row>
                                        <Row>
                                            <Text style={{marginTop:'3px', marginBottom:'3px',}}>{data1.漏洞概述}</Text>
                                        </Row>
                                    </Col>
                                </Text>
                            </Row> */}
                        </Row>
                        <Row style={{borderTop:'1px solid #E5E8EF' ,}}>
                            <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: 14 ,marginBottom: 10 ,fontWeight: 'bold'}}>
                                <h2 style={{ fontSize:'16px',fontWeight: 'bold', marginLeft: '0px'}}>影响资产</h2>
                            </div>
                            <div style={{  width: '100%', margin: '0 auto'}}>
                                <FetchAPIDataTable
                                    apiEndpoint="http://localhost:5000/api/vulndetetion"
                                    timeColumnIndex={['scanTime']}
                                    columns={this.state.columns}
                                    currentPanel="vulnerdetailsidebar"
                                />
                            </div>
                        </Row>
                    </Card>
                </Row>
                </Col>
                </Row>
            </div>
            );
            }}
            </DataContext.Consumer>
        )


        }
  }
  
  export default VulnerabilityDetailsSidebar;